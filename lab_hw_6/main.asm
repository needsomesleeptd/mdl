.MODEL TINY
.186

CodeSeg SEGMENT
	ASSUME CS:CodeSeg, DS:CodeSeg              ; CS и DS указывают на сегмент кода
    ORG 100h                                   ; размер PSP(Префикс программного сегмента) 
                                               ; для COM программы - 256 байтов, поэтому смещение 100h
          
                                               ; При запуске программы номер параграфа начала PSP заносится в DS
MAIN:   
    jmp INIT         

    CURRENT db 0     
    SPEED db 1111b     ; скорость автоповтора ввода символов
    OLD_BREAKING dd ? ; адресс старого прерывания  
    FLAG db 2





    
MY_BREAKING:
    pushf    
    call CS:OLD_BREAKING ; Вызываем старое прерывание чтобы IRET вернул все необходимые значения
    
    mov ah, 02h       
    int 1ah           
                       
    cmp dh, CURRENT   ; Сравнение текущего значения с секундами
	je END_MY_INTRRUPT ; Секунда не изменилась
    mov CURRENT, dh   
    
    mov al, 0F3h        ; Команда смена значений на клавиатуре
	out 60h, al       

	mov al, SPEED     ; новая скорость автоповтора
	out 60h, al       
    
    dec SPEED         ; Увеличиваем скорость
	cmp SPEED, 1111b   ; Сравниваем скорость с максимальной 
	je RESET          ; Восставнавливаем минимальное значение скорости
	jmp END_MY_INTRRUPT ; Заканчиваем свое прерывание
    
    RESET:
        mov SPEED, 1111b
    
    END_MY_INTRRUPT:
        IRET
    
INIT:
    mov ax, 351ch     ; ah = 35h, al = номер прерывания (00H до 0ffH)
                      ; DOS 35h вектор прерывания
                      ; Возвращает значение вектора прерывания для INT (AL)      
                      ; 08h - перехвать прерывания
                      ; !!! Меняет сегментный регистр ES
                      ; ES:BX = адрес обработчика прерывания
    int 21h           ; Определить адрес обработчика.              
   
    cmp bx, offset MY_BREAKING  ; если уже был перехват нашей программой то возвращаем к старому значению
    je UNINSTALL
    
    jmp INSTALL




INSTALL:    
  
    mov word ptr OLD_BREAKING, BX 	     ; сохранение смещения обработчика, 
                                         ; т.к. 35h хранит данные в ES:BX или ES:[AL * 4]
	mov word ptr OLD_BREAKING + 2, ES    ; сохранение сегмента обработчика
    
    mov ax, 251ch               ; установка адреса нового обработчика 08h - прерывание которое вызывается каждый тик процессора или то-то типо того
                                ; ah = 25h al = номер прерывания (00H до 0ffH)    
	mov dx, offset MY_BREAKING  ; указание смещения нашего обработчика ds- уже кстановлен на этот кодовый сегмент
    int 21h                     ; вызов DOS - функции  
    
    mov dx, offset INIT         ; смещение команды, начиная с которой фрагмент программы 
                                ; может быть удалён из памяти
	int 27h                     ; новый обработчик будет резидентным.
    
UNINSTALL:    
    pusha

    
    mov dx, word ptr ES:OLD_BREAKING ; Кладем в dx смещение старого разработчика
	mov ds, word ptr ES:OLD_BREAKING + 2 ;Кладем в dx Сегмента разработчика
	
	mov ax, 251ch ;Устанавливаем старый обработчик на прерывание 08h
	int 21h
    
    mov al, 0F3h ; Команда отвечаюшая за параметра режима автоповтора старший байт - 0, сладший байт 0 5,6 биты - пауза перед началом,4-0 скорость автоповтора
	out 60h, al
	mov al, 0 ; Ставим паузу на минимум и максимальную скорость
	out 60h, al
    
    popa
    
    mov ah, 49h ; Установить режим передачи(Освобождение памяти)
	int 21h     ; вызов DOS
    
    mov ax, 4c00h ; Конец программы
    int 21h
CodeSeg ENDS    
END MAIN